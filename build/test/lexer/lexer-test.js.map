{"version":3,"sources":["../../../src/test/lexer/lexer-test.js"],"names":["assert","describe","it","lexer","Lexer","token","nextToken","equal","type","TokenType","Newline","value","Integer","Decimal","String","True","False","Identifier","Abstract","Class","Func","Else","Extends","Final","For","In","If","Let","New","Null","Override","Private","Protected","Return","Super","To","This","Var","While","Dot","LeftArrow","DivEqual","Equal","MinusEqual","ModuloEqual","PlusEqual","RightArrow","TimesEqual","Div","Modulo","Minus","Plus","Times","DoubleEqual","Greater","GreaterOrEqual","Less","LessOrEqual","NotEqual","And","Not","Or","Colon","Comma","LeftBrace","RightBrace","LeftBracket","RightBracket","LeftParen","RightParen","tokens","tokenize","length","line","column"],"mappings":"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","file":"lexer-test.js","sourcesContent":["import * as assert from 'assert'\r\nimport { TokenType } from '../../main/lexer/tokentype'\r\nimport { Lexer } from '../../main/lexer/lexer'\r\n\r\ndescribe('Lexer', () => {\r\n\r\n    describe('#nextToken', () => {\r\n\r\n        it('should recognize a newline character as a single token', () => {\r\n            var lexer = new Lexer('\\n');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Newline);\r\n            assert.equal(token.value, '\\n');\r\n        });\r\n\r\n        it('should recognize the number 0', () => {\r\n            var lexer = new Lexer('0');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Integer);\r\n            assert.equal(token.value, '0');\r\n        });\r\n\r\n        it('should recognize a simple integer literal', () => {\r\n            var lexer = new Lexer('42');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Integer);\r\n            assert.equal(token.value, '42');\r\n        });\r\n\r\n        it('should recognize a simple decimal literal', () => {\r\n            var lexer = new Lexer('3.14');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Decimal);\r\n            assert.equal(token.value, '3.14');\r\n        });\r\n\r\n        it('should recognize a decimal starting with dot (.)', () => {\r\n            var lexer = new Lexer('.25');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Decimal);\r\n            assert.equal(token.value, '.25');\r\n        });\r\n\r\n        it('should recognize a decimal in scientific notation', () => {\r\n            var lexer = new Lexer('2e65');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Decimal);\r\n            assert.equal(token.value, '2e65');\r\n        });\r\n\r\n        it('should recognize a decimal in scientific notation with negative exponent part', () => {\r\n            var lexer = new Lexer('42e-65');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Decimal);\r\n            assert.equal(token.value, '42e-65');\r\n        });\r\n\r\n        it('should recognize a simple string literal', () => {\r\n            var lexer = new Lexer('\"Hello, World!\"');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.String);\r\n            assert.equal(token.value, '\"Hello, World!\"');\r\n        });\r\n\r\n        it('should recognize a string containing a newline character', () => {\r\n            var lexer = new Lexer('\"a string containing a \\\\n newline character.\"');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.String);\r\n            assert.equal(token.value, '\"a string containing a \\\\n newline character.\"');\r\n        });\r\n\r\n        it('should recognize a string containing an espaced backslash', () => {\r\n            var lexer = new Lexer('\"a string with a \\\\\\\\ backslash\"');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.String);\r\n            assert.equal(token.value, '\"a string with a \\\\\\\\ backslash\"');\r\n        });\r\n\r\n        it('should recognize a string containing escaped double quotes', () => {\r\n            var lexer = new Lexer('\"a string containing an \\\\\" escaped double quote\"');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.String);\r\n            assert.equal(token.value, '\"a string containing an \\\\\" escaped double quote\"');\r\n        });\r\n\r\n        it('should recognize a string containing escape sequences', () => {\r\n            var lexer = new Lexer('\"a string containing \\\\t\\\\b\\\\r\\\\f\\\\v\\\\0 escape sequences\"');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.String);\r\n            assert.equal(token.value, '\"a string containing \\\\t\\\\b\\\\r\\\\f\\\\v\\\\0 escape sequences\"');\r\n        });\r\n\r\n        it('should recognize the boolean true literal', () => {\r\n            var lexer = new Lexer('true');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.True);\r\n            assert.equal(token.value, 'true');\r\n        });\r\n\r\n        it('should recognize the boolean false literal', () => {\r\n            var lexer = new Lexer('false');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.False);\r\n            assert.equal(token.value, 'false');\r\n        });\r\n\r\n        it('should recognize an identifier of a single letter', () => {\r\n            var lexer = new Lexer('i');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Identifier);\r\n            assert.equal(token.value, 'i');\r\n        });\r\n\r\n        it('should recognize an identifier made of letters', () => {\r\n            var lexer = new Lexer('anIdentifier');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Identifier);\r\n            assert.equal(token.value, 'anIdentifier');\r\n        });\r\n\r\n        it('should recognize an identifier starting with underscore (_)', () => {\r\n            var lexer = new Lexer('_identifier');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Identifier);\r\n            assert.equal(token.value, '_identifier');\r\n        });\r\n\r\n        it('should recognize an identifier containing an underscore (_)', () => {\r\n            var lexer = new Lexer('an_identifier');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Identifier);\r\n            assert.equal(token.value, 'an_identifier');\r\n        });\r\n\r\n        it('should recognize an identifier containing a $ character', () => {\r\n            var lexer = new Lexer('an$identifier');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Identifier);\r\n            assert.equal(token.value, 'an$identifier');\r\n        });\r\n\r\n        it('should recognize an identifier containing a digit', () => {\r\n            var lexer = new Lexer('identifier1');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Identifier);\r\n            assert.equal(token.value, 'identifier1');\r\n        });\r\n\r\n        it('should recognize the abstract keyword', () => {\r\n            var lexer = new Lexer('abstract');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Abstract);\r\n            assert.equal(token.value, 'abstract');\r\n        });\r\n\r\n        it('should recognize the class keyword', () => {\r\n            var lexer = new Lexer('class');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Class);\r\n            assert.equal(token.value, 'class');\r\n        });\r\n\r\n        it('should recognize the func keyword', () => {\r\n            var lexer = new Lexer('func');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Func);\r\n            assert.equal(token.value, 'func');\r\n        });\r\n\r\n        it('should recognize the else keyword', () => {\r\n            var lexer = new Lexer('else');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Else);\r\n            assert.equal(token.value, 'else');\r\n        });\r\n\r\n        it('should recognize the extends keyword', () => {\r\n            var lexer = new Lexer('extends');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Extends);\r\n            assert.equal(token.value, 'extends');\r\n        });\r\n\r\n        it('should recognize the false keyword', () => {\r\n            var lexer = new Lexer('false');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.False);\r\n            assert.equal(token.value, 'false');\r\n        });\r\n\r\n        it('should recognize the final keyword', () => {\r\n            var lexer = new Lexer('final');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Final);\r\n            assert.equal(token.value, 'final');\r\n        });\r\n\r\n        it('should recognize the for keyword', () => {\r\n            var lexer = new Lexer('for');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.For);\r\n            assert.equal(token.value, 'for');\r\n        });\r\n\r\n        it('should recognize the in keyword', () => {\r\n            var lexer = new Lexer('in');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.In);\r\n            assert.equal(token.value, 'in');\r\n        });\r\n\r\n        it('should recognize the if keyword', () => {\r\n            var lexer = new Lexer('if');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.If);\r\n            assert.equal(token.value, 'if');\r\n        });\r\n\r\n        it('should recognize the let keyword', () => {\r\n            var lexer = new Lexer('let');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Let);\r\n            assert.equal(token.value, 'let');\r\n        });\r\n\r\n        it('should recognize the new keyword', () => {\r\n            var lexer = new Lexer('new');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.New);\r\n            assert.equal(token.value, 'new');\r\n        });\r\n\r\n        it('should recognize the null keyword', () => {\r\n            var lexer = new Lexer('null');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Null);\r\n            assert.equal(token.value, 'null');\r\n        });\r\n\r\n        it('should recognize the override keyword', () => {\r\n            var lexer = new Lexer('override');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Override);\r\n            assert.equal(token.value, 'override');\r\n        });\r\n\r\n        it('should recognize the private keyword', () => {\r\n            var lexer = new Lexer('private');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Private);\r\n            assert.equal(token.value, 'private');\r\n        });\r\n\r\n        it('should recognize the protected keyword', () => {\r\n            var lexer = new Lexer('protected');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Protected);\r\n            assert.equal(token.value, 'protected');\r\n        });\r\n\r\n        it('should recognize the return keyword', () => {\r\n            var lexer = new Lexer('return');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Return);\r\n            assert.equal(token.value, 'return');\r\n        });\r\n\r\n        it('should recognize the super keyword', () => {\r\n            var lexer = new Lexer('super');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Super);\r\n            assert.equal(token.value, 'super');\r\n        });\r\n\r\n        it('should recognize the to keyword', () => {\r\n            var lexer = new Lexer('to');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.To);\r\n            assert.equal(token.value, 'to');\r\n        });\r\n\r\n        it('should recognize the this keyword', () => {\r\n            var lexer = new Lexer('this');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.This);\r\n            assert.equal(token.value, 'this');\r\n        });\r\n\r\n        it('should recognize the true keyword', () => {\r\n            var lexer = new Lexer('true');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.True);\r\n            assert.equal(token.value, 'true');\r\n        });\r\n\r\n        it('should recognize the var keyword', () => {\r\n            var lexer = new Lexer('var');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Var);\r\n            assert.equal(token.value, 'var');\r\n        });\r\n\r\n        it('should recognize the while keyword', () => {\r\n            var lexer = new Lexer('while');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.While);\r\n            assert.equal(token.value, 'while');\r\n        });\r\n\r\n        it('should recognize an identifier starting with a reserved keyword', () => {\r\n            var lexer = new Lexer('toString');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Identifier);\r\n            assert.equal(token.value, 'toString');\r\n        });\r\n\r\n        it('should recognize the dispatch (.) operator', () => {\r\n            var lexer = new Lexer('.');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Dot);\r\n            assert.equal(token.value, '.');\r\n        });\r\n\r\n        it('should recognize the left arrow (<-) operator', () => {\r\n            var lexer = new Lexer('<-');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.LeftArrow);\r\n            assert.equal(token.value, '<-');\r\n        });\r\n\r\n        it('should recognize the div-equal (/=) operator', () => {\r\n            var lexer = new Lexer('/=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.DivEqual);\r\n            assert.equal(token.value, '/=');\r\n        });\r\n\r\n        it('should recognize the equal (=) operator', () => {\r\n            var lexer = new Lexer('=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Equal);\r\n            assert.equal(token.value, '=');\r\n        });\r\n\r\n        it('should recognize the minus-equal (-=) operator', () => {\r\n            var lexer = new Lexer('-=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.MinusEqual);\r\n            assert.equal(token.value, '-=');\r\n        });\r\n\r\n        it('should recognize the modulo-equal (%=) operator', () => {\r\n            var lexer = new Lexer('%=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.ModuloEqual);\r\n            assert.equal(token.value, '%=');\r\n        });\r\n\r\n        it('should recognize the plus-equal (+=) operator', () => {\r\n            var lexer = new Lexer('+=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.PlusEqual);\r\n            assert.equal(token.value, '+=');\r\n        });\r\n\r\n        it('should recognize the right arrow (->) operator', () => {\r\n            var lexer = new Lexer('->');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.RightArrow);\r\n            assert.equal(token.value, '->');\r\n        });\r\n\r\n        it('should recognize the times-equal operator', () => {\r\n            var lexer = new Lexer('*=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.TimesEqual);\r\n            assert.equal(token.value, '*=');\r\n        });\r\n\r\n        it('should recognize the div (/) operator', () => {\r\n            var lexer = new Lexer('/');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Div);\r\n            assert.equal(token.value, '/');\r\n        });\r\n\r\n        it('should recognize the modulo (%) operator', () => {\r\n            var lexer = new Lexer('%');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Modulo);\r\n            assert.equal(token.value, '%');\r\n        });\r\n\r\n        it('should recognize the minus (-) operator', () => {\r\n            var lexer = new Lexer('-');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Minus);\r\n            assert.equal(token.value, '-');\r\n        });\r\n\r\n        it('should recognize the plus (+) operator', () => {\r\n            var lexer = new Lexer('+');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Plus);\r\n            assert.equal(token.value, '+');\r\n        });\r\n\r\n        it('should recognize the times (*) operator', () => {\r\n            var lexer = new Lexer('*');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Times);\r\n            assert.equal(token.value, '*');\r\n        });\r\n\r\n        it('should recognize the double-equal (==) operator', () => {\r\n            var lexer = new Lexer('==');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.DoubleEqual);\r\n            assert.equal(token.value, '==');\r\n        });\r\n\r\n        it('should recognize the greater (>) operator', () => {\r\n            var lexer = new Lexer('>');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Greater);\r\n            assert.equal(token.value, '>');\r\n        });\r\n\r\n        it('should recognize the greater-or-equal (>=) operator', () => {\r\n            var lexer = new Lexer('>=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.GreaterOrEqual);\r\n            assert.equal(token.value, '>=');\r\n        });\r\n\r\n        it('should recognize the less (<) operator', () => {\r\n            var lexer = new Lexer('<');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Less);\r\n            assert.equal(token.value, '<');\r\n        });\r\n\r\n        it('should recognize the less-or-equal operator', () => {\r\n            var lexer = new Lexer('<=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.LessOrEqual);\r\n            assert.equal(token.value, '<=');\r\n        });\r\n\r\n        it('should recognize the not-equal (!=) operator', () => {\r\n            var lexer = new Lexer('!=');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.NotEqual);\r\n            assert.equal(token.value, '!=');\r\n        });\r\n\r\n        it('should recognize the and (&&) operator', () => {\r\n            var lexer = new Lexer('&&');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.And);\r\n            assert.equal(token.value, '&&');\r\n        });\r\n\r\n        it('should recognize the not (!) operator', () => {\r\n            var lexer = new Lexer('!');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Not);\r\n            assert.equal(token.value, '!');\r\n        });\r\n\r\n        it('should recognize the or (||) operator', () => {\r\n            var lexer = new Lexer('||');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Or);\r\n            assert.equal(token.value, '||');\r\n        });\r\n\r\n        it('should recognize a colon (:)', () => {\r\n            var lexer = new Lexer(':');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Colon);\r\n            assert.equal(token.value, ':');\r\n        });\r\n\r\n        it('should recognize a comma (,)', () => {\r\n            var lexer = new Lexer(',');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Comma);\r\n            assert.equal(token.value, ',');\r\n        });\r\n\r\n        it('should recognize a left brace ({)', () => {\r\n            var lexer = new Lexer('{');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.LeftBrace);\r\n            assert.equal(token.value, '{');\r\n        });\r\n\r\n        it('should recognize a right brace (})', () => {\r\n            var lexer = new Lexer('}');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.RightBrace);\r\n            assert.equal(token.value, '}');\r\n        });\r\n\r\n        it('should recognize a left bracket ([)', () => {\r\n            var lexer = new Lexer('[');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.LeftBracket);\r\n            assert.equal(token.value, '[');\r\n        });\r\n\r\n        it('should recognize a right bracket (])', () => {\r\n            var lexer = new Lexer(']');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.RightBracket);\r\n            assert.equal(token.value, ']');\r\n        });\r\n\r\n        it('should recognize a left parenthesis (()', () => {\r\n            var lexer = new Lexer('(');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.LeftParen);\r\n            assert.equal(token.value, '(');\r\n        });\r\n\r\n        it('should recognize a right parenthesis ())', () => {\r\n            var lexer = new Lexer(')');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.RightParen);\r\n            assert.equal(token.value, ')');\r\n        });\r\n\r\n        it('should recognize a colon (:)', () => {\r\n            var lexer = new Lexer(':');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Colon);\r\n            assert.equal(token.value, ':');\r\n        });\r\n\r\n        it('should recognize a comma (,)', () => {\r\n            var lexer = new Lexer(',');\r\n\r\n            var token = lexer.nextToken();\r\n\r\n            assert.equal(token.type, TokenType.Comma);\r\n            assert.equal(token.value, ',');\r\n        });\r\n\r\n    });\r\n\r\n    describe('#tokenize', () => {\r\n\r\n        it('should properly tokenize a full method definition', () => {\r\n            var lexer = new Lexer('func add(a: Int, b: Int): Int = {\\n' +\r\n                '   a + b\\n' +\r\n                '}');\r\n\r\n            var tokens = lexer.tokenize();\r\n\r\n            assert.equal(21, tokens.length);\r\n\r\n            assert.equal(tokens[0].type, TokenType.Func);\r\n\r\n            assert.equal(tokens[1].type, TokenType.Identifier);\r\n            assert.equal(tokens[1].value, 'add');\r\n\r\n            assert.equal(tokens[2].type, TokenType.LeftParen);\r\n\r\n            assert.equal(tokens[3].type, TokenType.Identifier);\r\n            assert.equal(tokens[3].value, 'a');\r\n\r\n            assert.equal(tokens[4].type, TokenType.Colon);\r\n\r\n            assert.equal(tokens[5].type, TokenType.Identifier);\r\n            assert.equal(tokens[5].value, 'Int');\r\n\r\n            assert.equal(tokens[6].type, TokenType.Comma);\r\n\r\n            assert.equal(tokens[7].type, TokenType.Identifier);\r\n            assert.equal(tokens[7].value, 'b');\r\n\r\n            assert.equal(tokens[8].type, TokenType.Colon);\r\n\r\n            assert.equal(tokens[9].type, TokenType.Identifier);\r\n            assert.equal(tokens[9].value, 'Int');\r\n\r\n            assert.equal(tokens[10].type, TokenType.RightParen);\r\n\r\n            assert.equal(tokens[11].type, TokenType.Colon);\r\n\r\n            assert.equal(tokens[12].type, TokenType.Identifier);\r\n            assert.equal(tokens[12].value, 'Int');\r\n\r\n            assert.equal(tokens[13].type, TokenType.Equal);\r\n\r\n            assert.equal(tokens[14].type, TokenType.LeftBrace);\r\n\r\n            assert.equal(tokens[15].type, TokenType.Newline);\r\n\r\n            assert.equal(tokens[16].type, TokenType.Identifier);\r\n            assert.equal(tokens[16].value, 'a');\r\n\r\n            assert.equal(tokens[17].type, TokenType.Plus);\r\n\r\n            assert.equal(tokens[18].type, TokenType.Identifier);\r\n            assert.equal(tokens[18].value, 'b');\r\n\r\n            assert.equal(tokens[19].type, TokenType.Newline);\r\n\r\n            assert.equal(tokens[20].type, TokenType.RightBrace);\r\n        });\r\n\r\n        it('should assign the correct line and column numbers', () => {\r\n            var lexer = new Lexer('func equals(a: Int, b: Int): Boolean = {\\n' +\r\n                '   a == b\\n' +\r\n                '}');\r\n\r\n            var tokens = lexer.tokenize();\r\n\r\n            assert.equal(0, tokens[0].line);\r\n            assert.equal(0, tokens[0].column);\r\n\r\n            assert.equal(0, tokens[1].line);\r\n            assert.equal(5, tokens[1].column);\r\n\r\n            assert.equal(0, tokens[2].line);\r\n            assert.equal(11, tokens[2].column);\r\n\r\n            assert.equal(0, tokens[3].line);\r\n            assert.equal(12, tokens[3].column);\r\n\r\n            assert.equal(0, tokens[4].line);\r\n            assert.equal(13, tokens[4].column);\r\n\r\n            assert.equal(0, tokens[5].line);\r\n            assert.equal(15, tokens[5].column);\r\n\r\n            assert.equal(0, tokens[6].line);\r\n            assert.equal(18, tokens[6].column);\r\n\r\n            assert.equal(0, tokens[7].line);\r\n            assert.equal(20, tokens[7].column);\r\n\r\n            assert.equal(0, tokens[8].line);\r\n            assert.equal(21, tokens[8].column);\r\n\r\n            assert.equal(0, tokens[9].line);\r\n            assert.equal(23, tokens[9].column);\r\n\r\n            assert.equal(0, tokens[10].line);\r\n            assert.equal(26, tokens[10].column);\r\n\r\n            assert.equal(0, tokens[11].line);\r\n            assert.equal(27, tokens[11].column);\r\n\r\n            assert.equal(0, tokens[12].line);\r\n            assert.equal(29, tokens[12].column);\r\n\r\n            assert.equal(0, tokens[13].line);\r\n            assert.equal(37, tokens[13].column);\r\n\r\n            assert.equal(0, tokens[14].line);\r\n            assert.equal(39, tokens[14].column);\r\n\r\n            assert.equal(0, tokens[15].line);\r\n            assert.equal(40, tokens[15].column);\r\n\r\n            assert.equal(1, tokens[16].line);\r\n            assert.equal(3, tokens[16].column);\r\n\r\n            assert.equal(1, tokens[17].line);\r\n            assert.equal(5, tokens[17].column);\r\n\r\n            assert.equal(1, tokens[18].line);\r\n            assert.equal(8, tokens[18].column);\r\n\r\n            assert.equal(1, tokens[19].line);\r\n            assert.equal(9, tokens[19].column);\r\n\r\n            assert.equal(2, tokens[20].line);\r\n            assert.equal(0, tokens[20].column);\r\n        });\r\n\r\n        it('should tokenize a simple expression', () => {\r\n            var lexer = new Lexer('42 + 21');\r\n\r\n            var tokens = lexer.tokenize();\r\n\r\n            assert.equal(3, tokens.length);\r\n\r\n            assert.equal(tokens[0].type, TokenType.Integer);\r\n            assert.equal(tokens[0].value, '42');\r\n\r\n            assert.equal(tokens[1].type, TokenType.Plus);\r\n            assert.equal(tokens[1].value, '+');\r\n\r\n            assert.equal(tokens[2].type, TokenType.Integer);\r\n            assert.equal(tokens[2].value, '21');\r\n        });\r\n    });\r\n});\r\n"]}