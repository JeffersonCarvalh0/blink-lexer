{"version":3,"sources":["../../../src/main/lexer/lexer.js"],"names":["Lexer","input","tokens","token","nextToken","type","TokenType","EndOfInput","push","something","console","log"],"mappings":";;;;;;;;;AAAA;;AACA;;;;IAEaA,K,WAAAA,K;AACT,mBAAYC,KAAZ,EAAmB;AAAA;;AACf,aAAKA,KAAL,GAAaA,KAAb;AACH;;;;mCAEU;AACP,gBAAIC,SAAS,EAAb;AACA,gBAAIC,QAAQ,KAAKC,SAAL,EAAZ;;AAEA,mBAAOD,MAAME,IAAN,KAAeC,qBAAUC,UAAhC,EAA4C;AACxCL,uBAAOM,IAAP,CAAYL,KAAZ;AACAA,wBAAQ,KAAKC,SAAL,EAAR;AACH;;AAED,mBAAOF,MAAP;AACH;;;oCAEW;AACR,iBAAKO,SAAL,IAAkBH,oBAAlB,EAA4B;AACxBI,wBAAQC,GAAR,CAAYF,SAAZ;AACH;AACJ","file":"lexer.js","sourcesContent":["import { Token } from './token'\r\nimport { TokenType } from './tokentype'\r\n\r\nexport class Lexer {\r\n    constructor(input) {\r\n        this.input = input;\r\n    }\r\n\r\n    tokenize() {\r\n        let tokens = [];\r\n        let token = this.nextToken();\r\n\r\n        while (token.type !== TokenType.EndOfInput) {\r\n            tokens.push(token);\r\n            token = this.nextToken();\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    nextToken() {\r\n        for( something in TokenType){\r\n            console.log(something);\r\n        }\r\n    }\r\n}\r\n"]}