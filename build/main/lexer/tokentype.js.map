{"version":3,"sources":["../../../src/main/lexer/tokentype.js"],"names":["TokenType","Int","Const","Double","Char","String","If","Else","True","False","Null","Return","While","For","Break","Continue","Void","DivEqual","Equal","MinusEqual","ModuloEqual","PlusEqual","TimesEqual","Div","Modulo","Minus","Plus","Times","DoubleEqual","Greater","GreaterOrEqual","Less","LessOrEqual","NotEqual","And","Not","Or","Colon","Comma","LeftBrace","LeftBracket","LeftParen","Newline","RightBrace","RightBracket","RightParen","Identifier","Integer","Decimal"],"mappings":";;;;;;;;;;AAAO,IAAIA;;AAEP;AACAC,SAAK,KAHE;AAIPC,WAAO,OAJA;AAKPC,YAAQ,QALD;AAMPC,UAAM,MANC;AAOPC,YAAQ,QAPD;AAQPC,QAAI,IARG;AASPC,UAAM,MATC;AAUPC,UAAM,MAVC;AAWPC,WAAO,OAXA;AAYPC,UAAM,MAZC;AAaPC,YAAQ,QAbD;AAcPC,WAAO,OAdA;AAePC,SAAK,KAfE;AAgBPC,WAAO,OAhBA;AAiBPC,cAAU,UAjBH;AAkBPC,UAAM,MAlBC;;AAoBP;AACAC,cAAU,IArBH;AAsBPC,WAAO,GAtBA;AAuBPC,gBAAY,IAvBL;AAwBPC,iBAAa,IAxBN;AAyBPC,eAAW,IAzBJ;AA0BPC,gBAAY,IA1BL;;AA4BP;AACAC,SAAK,GA7BE;AA8BPC,YAAQ,GA9BD;AA+BPC,WAAO,GA/BA;AAgCPC,UAAM,GAhCC;AAiCPC,WAAO,GAjCA;;AAmCP;AACAC,iBAAa,IApCN;AAqCPC,aAAS,GArCF;AAsCPC,oBAAgB,IAtCT;AAuCPC,UAAM,GAvCC;AAwCPC,iBAAa,IAxCN;AAyCPC,cAAU,IAzCH;;AA2CP;AACAC,SAAK,IA5CE;AA6CPC,SAAK,GA7CE;AA8CPC,QAAI,IA9CG;;AAgDP;AACAC,WAAO,GAjDA;AAkDPC,WAAO,GAlDA;AAmDPC,eAAW,GAnDJ;AAoDPC,iBAAa,GApDN;AAqDPC,eAAW,GArDJ;AAsDPC,aAAS,IAtDF;AAuDPC,gBAAY,GAvDL;AAwDPC,kBAAc,GAxDP;AAyDPC,gBAAY,GAzDL;;AA2DP;AACAC,gBAAY,YA5DL;AA6DPC,aAAS,SA7DF;AA8DPC,aAAS;AA9DF,yCA+DC,QA/DD,6CAkEK,YAlEL,+CAmEO,cAnEP,cAAJ","file":"tokentype.js","sourcesContent":["export var TokenType = {\r\n\r\n    // Keywords\r\n    Int: 'int',\r\n    Const: 'const',\r\n    Double: 'double',\r\n    Char: 'char',\r\n    String: 'string',\r\n    If: 'if',\r\n    Else: 'else',\r\n    True: 'true',\r\n    False: 'false',\r\n    Null: 'null',\r\n    Return: 'return',\r\n    While: 'while',\r\n    For: 'for',\r\n    Break: 'break',\r\n    Continue: 'continue',\r\n    Void: 'void',\r\n\r\n    // Assignment operators\r\n    DivEqual: '/=',\r\n    Equal: '=',\r\n    MinusEqual: '-=',\r\n    ModuloEqual: '%=',\r\n    PlusEqual: '+=',\r\n    TimesEqual: '*=',\r\n\r\n    // Arithmetic operators\r\n    Div: '/',\r\n    Modulo: '%',\r\n    Minus: '-',\r\n    Plus: '+',\r\n    Times: '*',\r\n\r\n    // Comparison operators\r\n    DoubleEqual: '==',\r\n    Greater: '>',\r\n    GreaterOrEqual: '>=',\r\n    Less: '<',\r\n    LessOrEqual: '<=',\r\n    NotEqual: '!=',\r\n\r\n    // Boolean operators\r\n    And: '&&',\r\n    Not: '!',\r\n    Or: '||',\r\n\r\n    // Delimiters\r\n    Colon: ':',\r\n    Comma: ',',\r\n    LeftBrace: '{',\r\n    LeftBracket: '[',\r\n    LeftParen: '(',\r\n    Newline: '\\n',\r\n    RightBrace: '}',\r\n    RightBracket: ']',\r\n    RightParen: ')',\r\n\r\n    // Identifier and Literals\r\n    Identifier: 'identifier',\r\n    Integer: 'integer',\r\n    Decimal: 'decimal',\r\n    String: 'string',\r\n\r\n    // Special token types\r\n    EndOfInput: 'EndOfInput',\r\n    Unrecognized: 'Unrecognized'\r\n};\r\n"]}