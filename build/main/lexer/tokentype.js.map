{"version":3,"sources":["../../../src/main/lexer/tokentype.js"],"names":["TokenType","keywords","Int","Const","Double","Char","String","If","Else","True","False","Null","Return","While","For","Break","Continue","Void","assignment","DivEqual","Equal","MinusEqual","ModuloEqual","PlusEqual","TimesEqual","arithmetic","Div","Modulo","Minus","Plus","Times","comparisson","DoubleEqual","Greater","GreaterOrEqual","Less","LessOrEqual","NotEqual","boolean","And","Not","Or","delimiters","Comma","LeftBrace","LeftBracket","LeftParen","RightBrace","RightBracket","RightParen","Semicolon","Identifier","Integer","Decimal","StringLiteral","EndOfInput","Unrecognized"],"mappings":";;;;;AAAO,IAAIA,gCAAY;AACnBC,cAAU;AACNC,aAAK,KADC;AAENC,eAAO,OAFD;AAGNC,gBAAQ,QAHF;AAINC,cAAM,MAJA;AAKNC,gBAAQ,QALF;AAMNC,YAAI,IANE;AAONC,cAAM,MAPA;AAQNC,cAAM,MARA;AASNC,eAAO,OATD;AAUNC,cAAM,MAVA;AAWNC,gBAAQ,QAXF;AAYNC,eAAO,OAZD;AAaNC,aAAK,KAbC;AAcNC,eAAO,OAdD;AAeNC,kBAAU,UAfJ;AAgBNC,cAAM;AAhBA,KADS;;AAoBnBC,gBAAY;AACRC,kBAAU,IADF;AAERC,eAAO,GAFC;AAGRC,oBAAY,IAHJ;AAIRC,qBAAa,IAJL;AAKRC,mBAAW,IALH;AAMRC,oBAAY;AANJ,KApBO;;AA6BnBC,gBAAY;AACRC,aAAK,GADG;AAERC,gBAAQ,GAFA;AAGRC,eAAO,GAHC;AAIRC,cAAM,GAJE;AAKRC,eAAO;AALC,KA7BO;;AAqCnBC,iBAAa;AACTC,qBAAa,IADJ;AAETC,iBAAS,GAFA;AAGTC,wBAAgB,IAHP;AAITC,cAAM,GAJG;AAKTC,qBAAa,IALJ;AAMTC,kBAAU;AAND,KArCM;;AA8CnBC,aAAS;AACLC,aAAK,IADA;AAELC,aAAK,GAFA;AAGLC,YAAI;AAHC,KA9CU;;AAoDnBC,gBAAY;AACRC,eAAO,GADC;AAERC,mBAAW,GAFH;AAGRC,qBAAa,GAHL;AAIRC,mBAAW,GAJH;AAKRC,oBAAY,GALJ;AAMRC,sBAAc,GANN;AAORC,oBAAY,GAPJ;AAQRC,mBAAW;AARH,KApDO;;AA+DnB;AACAC,gBAAY,YAhEO;AAiEnBC,aAAS,SAjEU;AAkEnBC,aAAS,SAlEU;AAmEnBC,mBAAe,eAnEI;;AAqEnB;AACAC,gBAAY,YAtEO;AAuEnBC,kBAAc;AAvEK,CAAhB","file":"tokentype.js","sourcesContent":["export var TokenType = {\n    keywords: {\n        Int: 'int',\n        Const: 'const',\n        Double: 'double',\n        Char: 'char',\n        String: 'string',\n        If: 'if',\n        Else: 'else',\n        True: 'true',\n        False: 'false',\n        Null: 'null',\n        Return: 'return',\n        While: 'while',\n        For: 'for',\n        Break: 'break',\n        Continue: 'continue',\n        Void: 'void'\n    },\n\n    assignment: {\n        DivEqual: '/=',\n        Equal: '=',\n        MinusEqual: '-=',\n        ModuloEqual: '%=',\n        PlusEqual: '+=',\n        TimesEqual: '*='\n    },\n\n    arithmetic: {\n        Div: '/',\n        Modulo: '%',\n        Minus: '-',\n        Plus: '+',\n        Times: '*'\n    },\n\n    comparisson: {\n        DoubleEqual: '==',\n        Greater: '>',\n        GreaterOrEqual: '>=',\n        Less: '<',\n        LessOrEqual: '<=',\n        NotEqual: '!='\n    },\n\n    boolean: {\n        And: '&&',\n        Not: '!',\n        Or: '||'\n    },\n\n    delimiters: {\n        Comma: ',',\n        LeftBrace: '{',\n        LeftBracket: '[',\n        LeftParen: '(',\n        RightBrace: '}',\n        RightBracket: ']',\n        RightParen: ')',\n        Semicolon: ';'\n    },\n\n    // Identifier and Literals\n    Identifier: 'identifier',\n    Integer: 'integer',\n    Decimal: 'decimal',\n    StringLiteral: 'stringLiteral',\n\n    // Special token types\n    EndOfInput: 'EndOfInput',\n    Unrecognized: 'Unrecognized'\n};\n"]}